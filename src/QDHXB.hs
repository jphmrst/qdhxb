{-# LANGUAGE TemplateHaskell #-}

-- | Quick-and-Dirty Haskell/XSD bindings
module QDHXB (
  -- * Invoking QDHXB
  qdhxb, qdhxb',

  -- * Options
  --
  -- | These options for the `qdhxb` function are re-exported from the
  -- @QDHXB.Options@ module.
  QDHXBOption,
  -- ** Structure of renamed types
  useNewType, noUseNewType,

  -- * Other re-exported utilities
  --
  -- | These values are used in the code generated by `qdhxb` and
  -- `qdhxb'`, and therefore are re-exported here for convenience.
  Content,
  ZeroOneMany(Zero, One, Many),
  pullContentFrom, zomToList, loadElement
  ) where

import Language.Haskell.TH (Q, Dec)
-- import System.Directory
import System.IO
import Control.Monad.IO.Class
import Text.XML.Light.Input (parseXML)
import Text.XML.Light.Types (Content) -- For re-export only
import QDHXB.Internal.Utils.XMLLight (
  -- Used below
  isElem,
  -- Re-exported
  ZeroOneMany(Zero, One, Many), pullContentFrom, zomToList, loadElement
  )
import QDHXB.Internal.XSDQ (XSDQ, runXSDQ)
import QDHXB.Internal.Pipeline
import QDHXB.Options

-- | Load the given XSD files, translating each into Haskell
-- declarations.
qdhxb :: QDHXBOption -> [String] -> Q [Dec]
qdhxb _ xsds = do
  -- liftIO (getCurrentDirectory >>= putStrLn . show)
  runXSDQ $ fmap concat $ mapM loadFile xsds

-- | Load and translate the given XSD files with the default options.
qdhxb' :: [String] -> Q [Dec]
qdhxb' = qdhxb id

loadFile :: String -> XSDQ [Dec]
loadFile xsdFile = do
  xsd <- liftIO $ readFile' xsdFile
  let xml = parseXML xsd
  xmlToDecs $ filter isElem xml
