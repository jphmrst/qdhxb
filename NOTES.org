
* Links
  :PROPERTIES:
  :VISIBILITY: content
  :END:
** Hackage
   - [[https://hackage.haskell.org/package/template-haskell-2.19.0.0/docs/Language-Haskell-TH.html][Language.Haskell.TH]]
   - [[https://hackage.haskell.org/package/xml-1.3.14/docs/Text-XML-Light-Types.html][Text.XML.Light.Types]]
   - [[https://hackage.haskell.org/package/base-4.17.0.0/docs/Control-Monad-IO-Class.html][Control.Monad.IO.Class]]
   - [[https://hackage.haskell.org/package/directory-1.3.8.0/docs/System-Directory.html][System.Directory]]
** XSD sources/samples (this directory)
   - [[file:xsd.xsd][xsd.xsd]]
   - [[file:datatypes.xsd][datatypes.xsd]]
   - [[file:./shiporder0.xsd][shiporder0.xsd]]
   - [[file:./shiporder1.xsd][shiporder1.xsd]]
   - [[file:./shiporder2.xsd][shiporder2.xsd]]
** Cabal/Stack notes
- In `stack.yaml`, tried setting
  `resolver: lts-12.20`

* TODO Soon --- go back and document [[./src/QDHXB/Manual.hs][Manual.hs]]
  - Need to make sense of this before adding more XSD features

* TODO Add some tests of the unpicklers as sample XSDs start to load
  - Can do Shiporder0 now
* TODO Picklers
  - This is in `hdecl`, in [[./src/QDHXB/Internal.hs][Internal.hs]]
  - Probably, two more functions for most named elements:
    - encodeELEM :: To a piece of parsed XML content (`Content`).
    - writeELEM :: To a file, possibly inline fns using encodeELEM and
      some standardized glue.

* TODO Shiporder1
  - Return to test suite
* TODO Shiporder2
  - Return to test suite
* TODO Use class/instance for abstract complex types?
* TODO Test code
  - Setup for unpicklers/picklers

* TODO Attribute use in xs:attribute
* TODO Unions
* TODO Other complex, simple type forms
  - And examples
* TODO Try the whole xsd.xsd
